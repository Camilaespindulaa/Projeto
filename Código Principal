import { initializeApp } from "firebase/app";
import { 
  getAuth, 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signOut 
} from "firebase/auth";
import { 
  getFirestore, 
  collection, 
  addDoc, 
  query, 
  where, 
  getDocs, 
  doc, 
  updateDoc, 
  deleteDoc, 
  serverTimestamp 
} from "firebase/firestore";

const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

export { 
  auth, 
  db, 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signOut,
  collection, 
  addDoc, 
  query, 
  where, 
  getDocs, 
  doc, 
  updateDoc, 
  deleteDoc, 
  serverTimestamp 
};
src/context/AuthContext.js
javascript
import { createContext, useContext, useEffect, useState } from 'react';
import { auth } from '../firebase';
import { 
  onAuthStateChanged, 
  signOut as firebaseSignOut 
} from 'firebase/auth';

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, user => {
      setCurrentUser(user);
      setLoading(false);
    });

    return unsubscribe;
  }, []);

  const signOut = () => {
    return firebaseSignOut(auth);
  };

  const value = {
    currentUser,
    signOut
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}
src/components/Auth/LoginForm.jsx
javascript
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../../firebase';
import { Button, TextField, Box, Typography, Link } from '@mui/material';

export default function LoginForm() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    try {
      await signInWithEmailAndPassword(auth, email, password);
      navigate('/dashboard');
    } catch (err) {
      setError('Falha no login. Verifique seu e-mail e senha.');
      console.error(err);
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit} sx={{ mt: 1 }}>
      <TextField
        margin="normal"
        required
        fullWidth
        id="email"
        label="E-mail"
        name="email"
        autoComplete="email"
        autoFocus
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <TextField
        margin="normal"
        required
        fullWidth
        name="password"
        label="Senha"
        type="password"
        id="password"
        autoComplete="current-password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      {error && (
        <Typography color="error" variant="body2">
          {error}
        </Typography>
      )}
      <Button
        type="submit"
        fullWidth
        variant="contained"
        sx={{ mt: 3, mb: 2 }}
      >
        Entrar
      </Button>
      <Box textAlign="center">
        <Link href="/register" variant="body2">
          Não tem uma conta? Cadastre-se
        </Link>
      </Box>
    </Box>
  );
}
src/components/Tasks/TaskList.jsx
javascript
import { useEffect, useState } from 'react';
import { 
  collection, 
  query, 
  where, 
  onSnapshot, 
  doc, 
  updateDoc,
  deleteDoc 
} from 'firebase/firestore';
import { db } from '../../firebase';
import { useAuth } from '../../context/AuthContext';
import { format, isToday, isAfter, isBefore, parseISO } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { 
  List, 
  ListItem, 
  ListItemText, 
  Checkbox, 
  IconButton, 
  Typography, 
  Divider, 
  Paper,
  Chip
} from '@mui/material';
import { Delete, Edit } from '@mui/icons-material';

export default function TaskList() {
  const { currentUser } = useAuth();
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!currentUser) return;

    const q = query(collection(db, 'users', currentUser.uid, 'tasks'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const tasksData = [];
      querySnapshot.forEach((doc) => {
        tasksData.push({ id: doc.id, ...doc.data() });
      });
      
      // Ordenar por data de vencimento
      tasksData.sort((a, b) => {
        return new Date(a.dueDate) - new Date(b.dueDate);
      });
      
      setTasks(tasksData);
      setLoading(false);
    });

    return () => unsubscribe();
  }, [currentUser]);

  const handleToggleComplete = async (taskId, completed) => {
    if (!currentUser) return;
    
    const taskRef = doc(db, 'users', currentUser.uid, 'tasks', taskId);
    await updateDoc(taskRef, { completed: !completed });
  };

  const handleDeleteTask = async (taskId) => {
    if (!currentUser) return;
    
    const taskRef = doc(db, 'users', currentUser.uid, 'tasks', taskId);
    await deleteDoc(taskRef);
  };

  const filterTasks = (filterType) => {
    const today = new Date();
    
    return tasks.filter(task => {
      const dueDate = parseISO(task.dueDate);
      
      switch (filterType) {
        case 'today':
          return isToday(dueDate) && !task.completed;
        case 'upcoming':
          return isAfter(dueDate, today) && !task.completed;
        case 'overdue':
          return isBefore(dueDate, today) && !task.completed;
        case 'completed':
          return task.completed;
        default:
          return true;
      }
    });
  };

  const formatDueDate = (dateString) => {
    const date = parseISO(dateString);
    return format(date, "PP", { locale: ptBR });
  };

  if (loading) {
    return <Typography>Carregando tarefas...</Typography>;
  }

  return (
    <Paper elevation={3} sx={{ p: 2, mb: 3 }}>
      <Typography variant="h6" gutterBottom>
        Suas Tarefas
      </Typography>
      
      <Divider sx={{ my: 2 }} />
      
      <Typography variant="subtitle1" gutterBottom>
        Para Hoje
      </Typography>
      <TaskSection tasks={filterTasks('today')} 
        handleToggleComplete={handleToggleComplete} 
        handleDeleteTask={handleDeleteTask}
        formatDueDate={formatDueDate}
      />
      
      <Typography variant="subtitle1" gutterBottom sx={{ mt: 3 }}>
        Próximas
      </Typography>
      <TaskSection tasks={filterTasks('upcoming')} 
        handleToggleComplete={handleToggleComplete} 
        handleDeleteTask={handleDeleteTask}
        formatDueDate={formatDueDate}
      />
      
      <Typography variant="subtitle1" gutterBottom sx={{ mt: 3 }}>
        Atrasadas
      </Typography>
      <TaskSection tasks={filterTasks('overdue')} 
        handleToggleComplete={handleToggleComplete} 
        handleDeleteTask={handleDeleteTask}
        formatDueDate={formatDueDate}
      />
      
      <Typography variant="subtitle1" gutterBottom sx={{ mt: 3 }}>
        Concluídas
      </Typography>
      <TaskSection tasks={filterTasks('completed')} 
        handleToggleComplete={handleToggleComplete} 
        handleDeleteTask={handleDeleteTask}
        formatDueDate={formatDueDate}
      />
    </Paper>
  );
}

function TaskSection({ tasks, handleToggleComplete, handleDeleteTask, formatDueDate }) {
  if (tasks.length === 0) {
    return <Typography variant="body2">Nenhuma tarefa encontrada</Typography>;
  }

  return (
    <List>
      {tasks.map((task) => (
        <ListItem
          key={task.id}
          secondaryAction={
            <>
              <IconButton edge="end" onClick={() => handleDeleteTask(task.id)}>
                <Delete />
              </IconButton>
            </>
          }
          sx={{
            textDecoration: task.completed ? 'line-through' : 'none',
            opacity: task.completed ? 0.7 : 1,
          }}
        >
          <Checkbox
            edge="start"
            checked={task.completed}
            onChange={() => handleToggleComplete(task.id, task.completed)}
          />
          <ListItemText
            primary={task.title}
            secondary={
              <>
                {task.description && <span>{task.description}<br /></span>}
                <Chip 
                  label={formatDueDate(task.dueDate)} 
                  size="small" 
                  color={task.completed ? 'default' : 'primary'}
                  variant="outlined"
                />
              </>
            }
          />
        </ListItem>
      ))}
    </List>
  );
}
src/components/Progress/ProgressChart.jsx
javascript
import { useEffect, useState } from 'react';
import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../../firebase';
import { useAuth } from '../../context/AuthContext';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { Doughnut } from 'react-chartjs-2';
import { Box, Typography, Paper } from '@mui/material';

ChartJS.register(ArcElement, Tooltip, Legend);

export default function ProgressChart() {
  const { currentUser } = useAuth();
  const [chartData, setChartData] = useState({
    completed: 0,
    pending: 0,
    overdue: 0
  });

  useEffect(() => {
    if (!currentUser) return;

    const fetchTasks = async () => {
      const today = new Date();
      const q = query(collection(db, 'users', currentUser.uid, 'tasks'));
      const querySnapshot = await getDocs(q);
      
      let completed = 0;
      let pending = 0;
      let overdue = 0;

      querySnapshot.forEach((doc) => {
        const task = doc.data();
        const dueDate = new Date(task.dueDate);
        
        if (task.completed) {
          completed++;
        } else if (dueDate < today) {
          overdue++;
        } else {
          pending++;
        }
      });

      setChartData({ completed, pending, overdue });
    };

    fetchTasks();
  }, [currentUser]);

  const data = {
    labels: ['Concluídas', 'Pendentes', 'Atrasadas'],
    datasets: [
      {
        data: [chartData.completed, chartData.pending, chartData.overdue],
        backgroundColor: [
          '#4CAF50',
          '#2196F3',
          '#F44336'
        ],
        borderWidth: 1,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'bottom',
      },
    },
  };

  const totalTasks = chartData.completed + chartData.pending + chartData.overdue;
  const completionRate = totalTasks > 0 
    ? Math.round((chartData.completed / totalTasks) * 100) 
    : 0;

  return (
    <Paper elevation={3} sx={{ p: 2, mb: 3 }}>
      <Typography variant="h6" gutterBottom>
        Seu Progresso
      </Typography>
      
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <Typography variant="body1" sx={{ mr: 1 }}>
          Taxa de conclusão:
        </Typography>
        <Typography variant="h6" color="primary">
          {completionRate}%
        </Typography>
      </Box>
      
      <Box sx={{ height: 300 }}>
        <Doughnut data={data} options={options} />
      </Box>
      
      <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between' }}>
        <Box sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{chartData.completed}</Typography>
          <Typography variant="body2">Concluídas</Typography>
        </Box>
        <Box sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{chartData.pending}</Typography>
          <Typography variant="body2">Pendentes</Typography>
        </Box>
        <Box sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{chartData.overdue}</Typography>
          <Typography variant="body2">Atrasadas</Typography>
        </Box>
      </Box>
    </Paper>
  );
}
src/pages/DashboardPage.jsx
javascript
import { Container, Grid, Typography } from '@mui/material';
import TaskList from '../components/Tasks/TaskList';
import ProgressChart from '../components/Progress/ProgressChart';
import TaskForm from '../components/Tasks/TaskForm';
import { useAuth } from '../context/AuthContext';

export default function DashboardPage() {
  const { currentUser } = useAuth();

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Bem-vindo, {currentUser?.email.split('@')[0]}!
      </Typography>
      
      <Grid container spacing={3}>
        <Grid item xs={12} md={8}>
          <TaskList />
        </Grid>
        
        <Grid item xs={12} md={4}>
          <ProgressChart />
          <TaskForm />
        </Grid>
      </Grid>
    </Container>
  );
}
src/App.js
javascript
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import PrivateRoute from './components/Shared/PrivateRoute';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import DashboardPage from './pages/DashboardPage';
import NotFoundPage from './pages/NotFoundPage';
import { CssBaseline, ThemeProvider, createTheme } from '@mui/material';

const theme = createTheme({
  palette: {
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#dc004e',
    },
  },
});

function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Router>
        <AuthProvider>
          <Routes>
            <Route path="/login" element={<LoginPage />} />
            <Route path="/register" element={<RegisterPage />} />
            <Route 
              path="/" 
              element={
                <PrivateRoute>
                  <DashboardPage />
                </PrivateRoute>
              } 
            />
            <Route path="*" element={<NotFoundPage />} />
          </Routes>
        </AuthProvider>
      </Router>
    </ThemeProvider>
  );
}

export default App;
